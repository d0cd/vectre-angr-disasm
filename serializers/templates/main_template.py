from string import Template

main_template = Template("module main {\n"
                         "    type * = common.*;\n\n"
                         "    instance t1: program(spec_enabled: (false));\n"
                         "    instance t2: program(spec_enabled: (false));\n"
                         "    instance t3: program(spec_enabled: (true));\n"
                         "    instance t4: program(spec_enabled: (true));\n\n"
                         "    init {\n"
                         "        assume(t1.mem == t3.mem);\n"
                         "        assume(t2.mem == t4.mem);\n"
                         "    }\n\n"
                         "    assume(t1.pc == t2.pc);\n"
                         "    assume(t1.obs_mem == t2.obs_mem);\n"
                         "    assume(t1.br_pred_state == t2.br_pred_state);\n\n"
                         "    next {\n"
                         "        if (t3.spec_level == common.spec_idx0) {\n"
                         "            assume(t1.obs_mem == t3.obs_mem);\n"
                         "            next(t1);\n"
                         "        }\n"
                         "        if (t4.spec_level == common.spec_idx0) {\n"
                         "            assume(t2.obs_mem == t4.obs_mem);\n"
                         "            next(t2);\n"
                         "        }\n"
                         "        next(t3); next(t4);\n"
                         "    }\n\n"
                         # 4-Safety properties
                         "    invariant same_pc: t3.pc == t4.pc;\n"
                         "    invariant same_mem_obs: t3.obs_mem == t4.obs_mem;\n"
                         "    invariant same_br_pred_state: t3.br_pred_state == t4.br_pred_state;\n\n"
                         # Same inputs (currently assuming RDI the same...
                         "    invariant same_input: t1.RDI == t2.RDI && t1.RDI == t3.RDI && t1.RDI == t4.RDI;\n"
                         # Start with same speculation levels
                         "    invariant same_spec_level: t3.spec_level == t4.spec_level;\n"
                         "    invariant same_spec_pc: t3.spec_pc == t4.spec_pc;\n\n"
                         # Nonspecualtive models never speculate
                         "    assume (t1.spec_level == common.spec_idx0 && t2.spec_level == common.spec_idx0);\n"
                         "    ${SAME_NOSPEC}\n"
                         "    define same_mem_entry(mem: mem_t, addr: addr_t): boolean = common.read(mem, addr) == common.read(common.mem_init, addr);\n"
                         "    invariant same_mem_mostly: (forall (addr: addr_t) :: (addr != common.secret_addr && addr != common.const_2101304) ==> (same_mem_entry(t1.mem, addr) && same_mem_entry(t2.mem, addr) && same_mem_entry(t3.mem, addr) && same_mem_entry(t4.mem, addr)));\n"
                         "    control {\n"
                         "        v = unroll(6);\n"
                         "        check;\n"
                         "        print_results;\n"
                         "        v.print_cex(t3.pc, t4.pc, t3.spec_level, t4.spec_level,\n"
                         "                    t3.spec_enabled, t4.spec_enabled,\n"
                         "                    t3.mem, t4.mem, t3.obs_mem, t4.obs_mem);\n"
                         "    }\n"
                         "}")
