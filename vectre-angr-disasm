#!/usr/bin/env python3

import argparse
import angr

from serializers import VectreProgDefSerializer, VectreInstDefSerializer, VectrePlatformDefSerializer


if __name__ == "__main__":

    parser = argparse.ArgumentParser(description="BIL to UCLID5 Transpiler to check secure speculation.")
    parser.add_argument("binary_file_paths", nargs='+', help='Binary files.')
    parser.add_argument('--prog-def', metavar="FILE", nargs=1, help='Generate program definition and output to [FILE].')
    parser.add_argument('--inst-def', metavar="FILE", nargs=1, help='Generate instruction definition and output to [FILE].')
    parser.add_argument('--plat-def', metavar="FILE", nargs=1, help='Generate platform definition and output to [FILE].')
    args = parser.parse_args()

    binary_file_paths = args.binary_file_paths
    projs = [angr.Project(path) for path in binary_file_paths]

    if args.prog_def:
        if len(projs) > 1:
            print(f"WARNING: VectreProgDefSerializer only takes one binary file as input, using the first one provided: {projs[0].filename}")
        serializer = VectreProgDefSerializer(projs[0])
        prog_spec = serializer.serialize_binaries()
        with open(args.prog_def[0], 'w+') as f:
           f.write(prog_spec)

    if args.inst_def:
        serializer = VectreInstDefSerializer(projs)
        inst_spec = serializer.serialize_inst_def()
        with open(args.inst_def[0], 'w+') as f:
            f.write(inst_spec)

    if args.plat_def:
        serializer = VectrePlatformDefSerializer(projs)
        plat_spec = serializer.serialize_platform_def()
        with open(args.plat_def[0], 'w+') as f:
            f.write(plat_spec)




